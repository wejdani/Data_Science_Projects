# iterate through the week
for (i in 1:Days_of_week){
sum_loss <- sum(total_loss_th_N$Total_loss, na.rm = TRUE)
return(sum_loss)
}
}
#function call
sum_loss_for_week_th_1 <- sum_lost(total_loss_theater_1) # sum loss for all week in theater 1
sum_loss_for_week_th_2 <- sum_lost(total_loss_theater_2) # sum loss for all week in theater 2
#pie plot for theater 1
value1 <- c(sum_rev_for_week_th_1,sum_loss_for_week_th_1)
pie_percent1 <- round(100*value1/sum(value1), 1)
chart_2_theater_1 <- pie(value1,
labels = pie_percent1,
main = "Theater 1 Revenue VS. Lost",
col = c("#d4a7b7","#a95070"))
legend("topright", c("Revenue", "Lost"), cex = 0.8,
fill = c("#d4a7b7","#a95070"))
#pie plot for theater 2
value2 <- c(sum_rev_for_week_th_2,sum_loss_for_week_th_2)
pie_percent2 <- round(100*value2/sum(value2), 1)
chart_2_theater_2 <- pie(value2,
labels = pie_percent2,
main = "Theater 2 Revenue VS. Lost",
col = c("#d4a7b7","#a95070"))
legend("topright", c("Revenue", "Lost"), cex = 0.8,
fill = c("#d4a7b7","#a95070"))
#-------------------------------------------------------------------------------------------------------------------------------#
# Clear plots
#dev.off()  # But only if there IS a plot
# Clear console
#cat("\014")  # ctrl+L
#-------------------------------------------------------------------------------------------------#
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
installed.packages("tidyverse")
library(tidyverse)
mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
ggplot(data = mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = hwy, y = cyl))
#How many rows are in mpg? How many columns?
?mpg
#How many rows are in mpg? How many columns?
mpg
nrow(mpg)
ncol(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
View(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = 1:234))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = 1:234))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
?mpg
mpg
# 3. Map a continuous variable to color, size, and shape. How do these aesthetics behave differently for categorical vs. continuous variables?
ggplot(data = mpg) +
geom_point(mapping = aes(x = year, y = cyl), color = "blue")
# 3. Map a continuous variable to color, size, and shape. How do these aesthetics behave differently for categorical vs. continuous variables?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cyl), color = "blue")
# 3. Map a continuous variable to color, size, and shape. How do these aesthetics behave differently for categorical vs. continuous variables?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cyl), color = manufacturer)
# 3. Map a continuous variable to color, size, and shape. How do these aesthetics behave differently for categorical vs. continuous variables?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cyl), color = manufacturer)
# 3. Map a continuous variable to color, size, and shape. How do these aesthetics behave differently for categorical vs. continuous variables?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cyl), color = manufacturer)
# 3. Map a continuous variable to color, size, and shape. How do these aesthetics behave differently for categorical vs. continuous variables?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cyl), color = model)
# 3. Map a continuous variable to color, size, and shape. How do these aesthetics behave differently for categorical vs. continuous variables?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cyl, color = model))
# 3. Map a continuous variable to color, size, and shape. How do these aesthetics behave differently for categorical vs. continuous variables?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cyl, color = model))
# 3. Map a continuous variable to color, size, and shape. How do these aesthetics behave differently for categorical vs. continuous variables?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cyl, color = manufacturer))
# 3. Map a continuous variable to color, size, and shape. How do these aesthetics behave differently for categorical vs. continuous variables?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = manufacturer))
# 3. Map a continuous variable to color, size, and shape. How do these aesthetics behave differently for categorical vs. continuous variables?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = cyl))
#categorical:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = model))
#categorical:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = manufacturer))
#continuous:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = cyl))
#categorical:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer))
#continuous:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cyl))
#categorical:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = manufacturer))
#categorical:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer))
#continuous:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cyl))
#categorical:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = manufacturer))
#continuous:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cyl))
#continuous:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = cyl))
#categorical:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = manufacturer))
#categorical:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = manufacturer))
#continuous:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cyl))
#continuous:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = cyl))
# 4. What happens if you map the same variable to multiple aesthetics?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cyl, color = cyl))
# 4. What happens if you map the same variable to multiple aesthetics?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cyl, size = cyl, color = cyl))
hwy
# 4. What happens if you map the same variable to multiple aesthetics?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cyl, color = cyl))
# 5. What does the stroke aesthetic do? What shapes does it work with? (Hint: use ?geom_point)
?geom_point
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cyl, stroke =1))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cyl, stroke =10))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = cyl, stroke =10))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = model, stroke =10))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = model, stroke =1))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer, stroke =1))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer, stroke =25))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer, stroke =2, size=1))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer, stroke =2, size=2))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer, stroke =2, size=10))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer, stroke =1, size=10))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer, stroke =1, size=1))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer, stroke =1))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer, stroke =10))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer, stroke =10,size=20))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer, stroke =1,size=20))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer, stroke =1))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer),stroke =5)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer),stroke =1)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer),stroke =10)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = 21),stroke =1)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = 21),stroke =1)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = manufacturer),stroke =1)
# 6. What happens if you map an aesthetic to something other than a variable name, like aes(colour = displ < 5)? Note, youâ€™ll also need to specify x and y.
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color=displ<5))
#continuous:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = cyl))
#continuous:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = cyl))
#categorical:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = manufacturer))
# 1. What happens if you facet on a continuous variable?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = manufacturer))
# 1. What happens if you facet on a continuous variable?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = manufacturer))
facet_wrap(~ cty)
# 1. What happens if you facet on a continuous variable?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = manufacturer))
facet_grid(.~ cyl)
# 1. What happens if you facet on a continuous variable?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = manufacturer))
# 1. What happens if you facet on a continuous variable?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = manufacturer))
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_grid(. ~ cty)
mpg
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_grid(. ~ hwy)
# 1. What happens if you facet on a continuous variable?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = manufacturer))
# 1. What happens if you facet on a continuous variable?
ggplot(data = mpg, aes(x=displ,y=hwy)) +
#(mapping = aes(x = displ, y = hwy, color = manufacturer))
facet_grid(.~ hwy)
# 1. What happens if you facet on a continuous variable?
ggplot(data = mpg, aes(x=displ,y=hwy)) +
geom_point()
# 1. What happens if you facet on a continuous variable?
ggplot(data = mpg, aes(x=displ,y=hwy)) +
geom_point()+
facet_grid(.~ hwy)
# 1. What happens if you facet on a continuous variable?
ggplot(data = mpg) +
geom_point(mapping =  aes(x=displ,y=hwy))+
facet_grid(.~ hwy)
# 1. What happens if you facet on a continuous variable?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))+
facet_grid(.~ hwy)
mpg
# 1. What happens if you facet on a continuous variable?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))+
facet_grid(.~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))+
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))+
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
source('C:/Users/wejda/Desktop/DS_Bootcamp/Week 5/Day 21/homework.R', encoding = 'UTF-8')
# 5. Read ?facet_wrap. What does nrow do? What does ncol do? What other options control the layout of the individual panels? Why doesnâ€™t facet_grid() have nrow and ncol arguments?
?facet_wrap
?facet_grid
# 5. Read ?facet_wrap. What does nrow do? What does ncol do? What other options control the layout of the individual panels? Why doesnâ€™t facet_grid() have nrow and ncol arguments?
?facet_wrap
# 6. When using facet_grid() you should usually put the variable with more unique levels in the columns. Why?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(class ~ drv)
# 6. When using facet_grid() you should usually put the variable with more unique levels in the columns. Why?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ class)
# 6. When using facet_grid() you should usually put the variable with more unique levels in the columns. Why?
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(class ~ drv)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ class)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ class)
#Excercise 3.6.1
# 1. What geom would you use to draw a line chart? A boxplot? A histogram? An area chart?
ggplot(data = mpg,mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_line()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
?geom_smooth
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = TRUE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = TRUE
)
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg) +
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
)
# 4. What does the se argument to geom_smooth() do?
#its a toggle to turn
?geom_smooth
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot() +
geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy))
#Excercise 3.7.1
# 1. What is the default geom associated with stat_summary()? How could you rewrite the previous plot to use that geom function instead of the stat function?
?stat_summary
#the previous plot
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.min = min,
fun.max = max,
fun = median
)
ggplot(data = diamonds) +
geom_pointrange(
mapping = aes(x = cut, y = depth),
stat = "summary"
)
ggplot(data = diamonds) +
geom_pointrange(
mapping = aes(x = cut, y = depth),
)
ggplot(data = diamonds) +
geom_pointrange(
mapping = aes(x = cut, y = depth)
)
ggplot(data = diamonds) +
geom_pointrange(
mapping = aes(x = cut, y = depth),
stat = "identity")
ggplot(data = diamonds) +
geom_pointrange(
mapping = aes(x = cut, y = depth),
stat = "summary")
#Excercise 3.7.1
# 1. What is the default geom associated with stat_summary()? How could you rewrite the previous plot to use that geom function instead of the stat function?
?stat_summary
?geom_pointrange
ggplot(data = diamonds) +
geom_pointrange(
mapping = aes(x = cut, y = depth),
stat = "identity")
?geom_pointrange
ggplot(data = diamonds) +
geom_pointrange(
mapping = aes(x = cut, y = depth),
stat = "summary",
fun.min = min,
fun.max = max,
fun = median)
# 6. Recreate the R code necessary to generate the following graphs.
# 1)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se = FALSE)
# 2)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(group = drv), se = FALSE) +
geom_point()
# 3)
ggplot(mpg, aes(x = displ, y = hwy, colour = drv)) +
geom_point() +
geom_smooth(se = FALSE)
# 4)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv)) +
geom_smooth(se = FALSE)
# 3)
ggplot(mpg, aes(x = displ, y = hwy, colour = drv)) +
geom_point() +
geom_smooth(se = FALSE)
# 4)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv)) +
geom_smooth(se = FALSE)
# 5)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(colour = drv)) +
geom_smooth(aes(linetype = drv), se = FALSE)
# 6)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(size = 4, color = "white") +
geom_point(aes(colour = drv))
# 2. What does geom_col() do? How is it different to geom_bar()?
# they have
?geom_col
# 2. What does geom_col() do? How is it different to geom_bar()?
# they have
?geom_col()
pairs <- data.frame(geoms, stat)
# 3. Most geoms and stats come in pairs that are almost always used in concert. Read through the documentation and make a list of all the pairs. What do they have in common?
geoms <- c('geom_bar()',
'geom_bin2d()',
'geom_boxplot()',
'geom_contour_filled()',
'geom_contour()',
'geom_count()',
'geom_density_2d()',
'geom_density()',
'geom_dotplot()',
'geom_function()',
'geom_sf()',
'geom_sf()',
'geom_smooth()',
'geom_violin()',
'geom_hex()',
'geom_qq_line()',
'geom_qq()',
'geom_quantile()')
stat <- c('stat_count()',
'stat_bin_2d()',
'stat_boxplot()',
'stat_contour_filled()',
'stat_contour()',
'tat_sum()',
'stat_density_2d()',
'stat_density()',
'stat_bindot()',
'stat_function()',
'stat_sf()',
'stat_sf()',
'stat_smooth()',
'stat_ydensity()',
'stat_bin_hex()',
'stat_qq_line()',
'stat_qq()',
'stat_quantile()')
pairs <- data.frame(geoms, stat)
View(pairs)
